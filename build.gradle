import org.apache.tools.ant.filters.ReplaceTokens

plugins {
  id "com.github.hierynomus.license" version "0.14.0"
  id "com.xebialabs.xldp" version "1.0.5"
  id 'nebula.release' version '6.0.0'
  id "com.xebialabs.xl.docker" version "1.1.0"
}


version="1.0.0.RC2"

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: "com.xebialabs.xl.docker"

repositories {
  mavenLocal()
  mavenCentral()
  maven {
    url 'https://dist.xebialabs.com/public/maven2'
  }
}


xlDocker {
  compileImage = 'xebialabsunsupported/xlr_dev_compile'
  compileVersion = 'v8.0.0.1'
  runImage = 'xebialabsunsupported/xlr_dev_run'
  runVersion = 'v8.1.0.1'
  runPortMapping = '15516:5516'
}

test {
  // Auto detected Unit tests only, exclude the end to end integration test
   exclude '**/*IntegrationTest.class'
   // show standard out and standard error of the test JVM(s) on the console
   testLogging.showStandardStreams = true

}

task sleep (){
  doFirst{
    println 'Sleeping for 60 while xlr starts'
    sleep (60*1000)
  }
}

task subIntegrationTest (type: Test){
  doFirst{
    println 'In task subIntegrationTest'
  }
  // do not automatically for tests
  scanForTestClasses = false 
  // explicitly include the integration test
  include '**/*IntegrationTest.class'
  // show standard out and standard error of the test JVM(s) on the console
  testLogging.showStandardStreams = true 
  doLast {
  
  }
}

afterEvaluate {
  sleep.mustRunAfter runDockerCompose
  subIntegrationTest.mustRunAfter sleep
  stopDockerCompose.mustRunAfter subIntegrationTest
  task integrationTesting (dependsOn: ['runDockerCompose',
                            'sleep',
                            'subIntegrationTest',
                            'stopDockerCompose']) {
//                              'subIntegrationTest']) {
                doLast {
                    println "Finished running integration tests for $project"
                }
            }
}



if (!project.hasProperty('release.scope')) {
  project.ext['release.scope'] = 'patch'
}

if (!project.hasProperty('release.useLastTag')) {
  project.ext['release.useLastTag'] = true
}

processResources.configure {
  filter ReplaceTokens, tokens: [
    'project.version': version.toString(),
    'project.name'   : rootProject.name
  ]
}

dependencies {
  // Place rest-assured before JUnit dependency to make sure correct Hamcrest is used
  testCompile 'io.rest-assured:rest-assured:3.2.0'
  testCompile "junit:junit:4.11"
  // https://mvnrepository.com/artifact/com.googlecode.json-simple/json-simple
  testCompile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
}

license {
  header project.file('License.md')
  strictCheck false
  excludes(["**/*.txt", "**/*.json"])
}
